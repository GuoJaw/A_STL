

/*[1]创建大小为N的vector，并进行初始化为0
		vector<int> Vec(n, 0);
*/
/*[2]最值:时间复杂度O(lgN)   algorithm
		min_element
		max_element
*/
/*[3]lower_bound/upper_bound   二分  algorithm
		lower_bound: >=val 
		upper_bound: >val
*/
//[4]max和min函数  algorithm


#include<iostream>
#include<vector>
#include<functional>
#include<algorithm>
using namespace std;

/*[1]创建大小为N的vector，并进行初始化为0
		vector<int> Vec(n, 0);
*/
void test(){
	int n;
	cin >> n;
	vector<int> Vec(n, 0);

	for (int i = 0; i < n; i++)
		cin >> Vec[i];

}

/*[2]最值:时间复杂度O(lgN)   algorithm
		min_element
		max_element
*/
void test01(){
	//1.数组
	int A[] = { 1, 3, 2, 5, 8, 5, 40 };
	int N = sizeof(A) / sizeof(A[0]); //元素个数
	int min = *min_element(A, A + N);  //1
	int max = *max_element(A, A + N);  //40
	//2.vector
	vector<int> B = { 1, 3, 2, 5, 8, 5, 40 };
	int min2 = *min_element(B.begin(), B.end()); //1
	int max2 = *max_element(B.begin(), B.end()); //40

	//3.自定义比较器
	int min3 = *max_element(B.begin(), B.end(), greater<int>()); //1
}

/*[3]lower_bound/upper_bound   二分  algorithm
		lower_bound: >=val 
		upper_bound: >val
*/
void test02(){
	vector<int> vec = { 1, 3, 5, 7, 9, 11 };
//lower_bound
	//1.求迭代器
	auto iter1 = lower_bound(vec.begin(), vec.end(), 3); //指向3
	//2.求下标
	int pos1 = lower_bound(vec.begin(), vec.end(), 3)-vec.begin(); 
//upper_bound
	//1.求迭代器
	auto iter2 = upper_bound(vec.begin(), vec.end(), 3); //指向5
	//2.求下标
	int pos2 = upper_bound(vec.begin(), vec.end(), 3) - vec.begin(); 
}

//max和min函数  algorithm
void test03(){
	int a = 10, b = 2;
	int r1 = max(a, b); // 10 
	int r2 = min(a, b); // 2
}
int main(){
	test03();
}
